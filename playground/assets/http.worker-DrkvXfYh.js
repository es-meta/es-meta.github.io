let c="http://localhost:8080";const d=()=>{const o={};return o["Content-Type"]="application/json",o.Accept="application/json",o},p=o=>o.replace(/\/+$/,"").replace(/^\/+/,""),l=(o,r,a={})=>{let s=`${p(o)}/${p(r)}`;const e=[];for(const t in a){const n=a[t];if(typeof n=="string"||typeof n=="number"||typeof n=="boolean"){const u=`${encodeURIComponent(t)}=${encodeURIComponent(n.toString())}`;e.push(u)}else if(n!==void 0||n!==null)throw new Error(`Not supported entry type: ${typeof n}(${n})`)}if(e.length>0){const t=e.join("&");s+=`?${t}`}return s},f=async(o,r,a)=>{const s=l(o,r,a),e=await fetch(s,{method:"GET"});if(!e.ok)throw new Error(`GET request to ${s} failed with ${e.status}`);return await e.json()},i=async(o,r,a,s)=>{const e=l(o,a),t=await fetch(e,{method:r,headers:{...s?d():void 0},body:s!==void 0?JSON.stringify(s):void 0});if(!t.ok)throw new Error(`${r} request to ${e} failed with ${t.status}`);return await t.json()};self.onmessage=async o=>{const{id:r,type:a,endpoint:s,data:e}=o.data;try{let t;switch(a){case"META":new URL(e),c=e;break;case"GET":t=await f(c,s,e);break;case"POST":t=await i(c,"POST",s,e);break;case"PUT":t=await i(c,"PUT",s,e);break;case"DELETE":t=await i(c,"DELETE",s,e);break;default:throw new Error(`Unsupported request type: ${a}`)}self.postMessage({id:r,success:!0,data:t})}catch(t){console.error("error",t),self.postMessage({id:r,success:!1,error:t.message})}};
